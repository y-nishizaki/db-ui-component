name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.1)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: true
        type: string
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: true
        type: boolean
        default: true
      publish_to_testpypi:
        description: 'Publish to TestPyPI'
        required: true
        type: boolean
        default: true

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Update version
      run: |
        # バージョンを更新
        sed -i 's/version = "[^"]*"/version = "${{ github.event.inputs.version }}"/' pyproject.toml
        
        # 変更をコミット
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "Release version ${{ github.event.inputs.version }}"
        git tag -a v${{ github.event.inputs.version }} -m "Release version ${{ github.event.inputs.version }}"
        git push origin main
        git push origin v${{ github.event.inputs.version }}
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import db_ui_components; print('Package imported successfully')"

  publish-to-testpypi:
    runs-on: ubuntu-latest
    needs: prepare-release
    if: ${{ github.event.inputs.publish_to_testpypi }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*

  publish-to-pypi:
    runs-on: ubuntu-latest
    needs: prepare-release
    if: ${{ github.event.inputs.publish_to_pypi }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  create-github-release:
    runs-on: ubuntu-latest
    needs: [publish-to-pypi, publish-to-testpypi]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release ${{ github.event.inputs.version }}
        body: |
          ## Release ${{ github.event.inputs.version }}
          
          ${{ github.event.inputs.release_notes }}
          
          ### Installation
          ```bash
          pip install db-ui-components==${{ github.event.inputs.version }}
          ```
        draft: false
        prerelease: false