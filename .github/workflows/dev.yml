name: Development Workflow

on:
  push:
    branches: [ develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        flake8 db_ui_components/ tests/
        black --check db_ui_components/ tests/
        mypy db_ui_components/
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=db_ui_components --cov-report=term-missing
    
    - name: Run security checks
      run: |
        pip install safety bandit
        safety check
        bandit -r db_ui_components/ -f json -o bandit-report.json || true

  build-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import db_ui_components; print('Package imported successfully')"

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run code quality checks
      run: |
        # Check for TODO comments
        if grep -r "TODO" db_ui_components/ tests/; then
          echo "Warning: TODO comments found"
        fi
        
        # Check for FIXME comments
        if grep -r "FIXME" db_ui_components/ tests/; then
          echo "Warning: FIXME comments found"
        fi
        
        # Check for print statements (should use logging)
        if grep -r "print(" db_ui_components/; then
          echo "Warning: print statements found in production code"
        fi