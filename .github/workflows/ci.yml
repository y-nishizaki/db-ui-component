name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        flake8 db_ui_components/
        black --check db_ui_components/ tests/
        mypy db_ui_components/
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=db_ui_components --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # 開発環境（developブランチ）への自動デプロイ
  deploy-to-testpypi:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import db_ui_components; print('Package imported successfully')"
    
    - name: Publish to TestPyPI (Development)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        # 開発版としてバージョンにdevサフィックスを追加
        VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version']")-dev.$(date +%Y%m%d.%H%M%S)
        echo "Publishing development version: $VERSION"
        twine upload --repository testpypi dist/*

  # 本番環境（mainブランチ）のビルドとテスト
  build-and-test-production:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import db_ui_components; print('Package imported successfully')"

  # リリース時（GitHub Release）の本番デプロイ
  publish-to-pypi:
    runs-on: ubuntu-latest
    needs: build-and-test-production
    if: github.event_name == 'release' && github.event.action == 'published' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to PyPI (Production)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Publishing to production PyPI"
        twine upload dist/*
    
    - name: Create Release Notes
      run: |
        echo "## Release ${{ github.event.release.tag_name }}" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Changes" >> RELEASE_NOTES.md
        echo "${{ github.event.release.body }}" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Installation" >> RELEASE_NOTES.md
        echo "```bash" >> RELEASE_NOTES.md
        echo "pip install db-ui-components==${{ github.event.release.tag_name }}" >> RELEASE_NOTES.md
        echo "```" >> RELEASE_NOTES.md